import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/

class Order{

    public int id;
    public int[] ingredients;
    public int price;

    public Order(int id, int[] ingredients, int price){
        this.id = id;
        this.ingredients = ingredients;
        this.price = price;
    }

    public String output(){
        return "BREW " + this.id;
    }
}


class Spell{

    public int id;
    public int[] ingredients;
    public boolean castable;
    public boolean repeatable;

    public Spell(int id, int[] ingredients, boolean castable, boolean repeatable){
        this.id = id;
        this.ingredients = ingredients;
        this.castable = castable;
        this.repeatable = repeatable;
    }

    public String output(int times){
        return "CAST " + this.id + " " + times;
    }

    public void show(){
        System.err.println();
        System.err.println("id: " + id);
        System.err.println("ingredients: ");
        for(int i = 0; i < 4; i++){
            System.err.println();
            System.err.print(this.ingredients[i] + ", ");
        }
        System.err.println();
        System.err.println("castable: " + castable);
        System.err.println("repeatable: " + repeatable);
        System.err.println();
    }
}

class LearnSpell{

    public int id;
    public int[] ingredients;
    public int tomeIndex;
    public int taxCount;
    public boolean repeatable;

    public LearnSpell(int id, int[] ingredients, int tomeIndex, int taxCount, boolean repeatable){
        this.id = id;
        this.ingredients = ingredients;
        this.tomeIndex = tomeIndex;
        this.taxCount = taxCount;
        this.repeatable = repeatable;
    }

    public String output(){
        return "LEARN " + this.id;
    }
    public String output(int times){
        return "CAST " + this.id + " " + times;
    }

    public void show(){
        System.err.println();
        System.err.println("id: " + id);
        System.err.println("ingredients: ");
        for(int i = 0; i < 4; i++){
            System.err.println();
            System.err.print(this.ingredients[i] + ", ");
        }
        System.err.println();
        System.err.println("repeatable: " + repeatable);
        System.err.println("tomeIndex: " + tomeIndex);
        System.err.println("taxCount: " + taxCount);
        System.err.println();
    }
}


class State{

    public int score;
    public int[] ingredients;
    public BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed;

    public int depth;
    public String command;

    public State(int score, int[] ingredients, BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, String command, int depth){
        this.score = score;
        this.ingredients = ingredients;
        this.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed;
        this.command = command;
        this.depth = depth;
    }


    public List<Order> canBrew(){
        List<Order> output = new ArrayList<Order>();

        for (Order order : Player.orders) {
            if(this.haveIngredients(order.ingredients)){
                output.add(order);
            }
            else{
                output.add(null);
            }
        }

        return output;
    }

    public boolean haveIngredients(int[] ingredients){
        for(int i = 0; i < 4; i++)
            if(ingredients[i] * -1 > this.ingredients[i])
                return false;
        return true;
    }


    public double evaluate(){
        double res = this.score + this.ingredients[1] * 1 + 
        this.ingredients[2] * 1 + this.ingredients[3] * 1;

        /*for (int i = 0; i < Player.mySpellsSize; i++) {
            if(this.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(i)) res += 0.01;
        }*/

        for (int i = Player.startOrdersIndex; i < Player.startOrdersIndex + Player.ordersSize; i++) {
            if(this.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(i)) res += 1.1;
        }

        for (int i = Player.startSpellsLearndIndex; i < Player.startSpellsLearndIndex + Player.spellsToLearnSize; i++) {
            if(this.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(i)) res += 0.5;
        }

        return  Math.pow(0.95, this.depth) * res;
    }

    public void show(){
        System.err.println();
        System.err.println("score: " + score);
        System.err.println("depth: " + depth);
        System.err.println("ingredients: ");
        for(int i = 0; i < 4; i++){
            System.err.print(this.ingredients[i] + ", ");
        }
        System.err.println();
        System.err.println();
        System.err.println("spellsUsed: ");
        for (int i = Player.startSpellsLearndUsedIndex; i < Player.startSpellsLearndUsedIndex + Player.spellsToLearnSize; i++) {
            System.err.print(this.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(i) + ", ");
        }
        System.err.println();
        System.err.println();
    }
}


class Sortbyroll implements Comparator<State>
{
    // Used for sorting in ascending order of
    // roll number
    public int compare(State a, State b)
    {
        double res = a.evaluate() - b.evaluate();
        if(res > 0) return -1;
        if(res < 0) return 1;
        return 0;
    }
}

class Player {

    public static List<Order> orders;
    public static List<Spell> mySpells;
    public static List<Spell> opSpells;
    public static List<LearnSpell> spellsToLearn;
    public static int mySpellsSize;
    public static int opSpellsSize;
    public static int spellsToLearnSize = 6;
    public static int ordersSize = 5;

    public static int startOrdersIndex;
    public static int startSpellsLearndIndex;
    public static int startSpellsLearndUsedIndex;

    public static long startTime;
    public static double[] values = {1, 2, 3, 4};

    //public static int mone = 0;

    public static int N = 20;
    public static int learn = 8;
 
    public static int timeToEnd = 50;

    public static int ordersLeftToMe = 6;
    public static int ordersLeftToOpponent = 6;
    public static int prevOpponentScore = 0;
    public static int prevMyScore = 0;

    public static List<Integer> spellsToLearnASAP = new ArrayList<Integer>();

    public static boolean haveBlueRep = false;
    public static boolean haveGreenRep = false;
    public static boolean haveOrangeRep = false;
    public static boolean haveYellowRep = false;

    public static boolean reduceYellow = false;

    public static List<State> states;

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);

        // game loop
        while (true) {
            orders = new ArrayList<Order>();
            mySpells = new ArrayList<Spell>();
            opSpells = new ArrayList<Spell>();
            spellsToLearn = new ArrayList<LearnSpell>();

            int actionCount = in.nextInt(); // the number of spells and recipes in play
            startTime = System.currentTimeMillis();
            for (int i = 0; i < actionCount; i++) {
                int actionId = in.nextInt(); // the unique ID of this spell or recipe
                String actionType = in.next(); // in the first league: BREW; later: CAST, OPPONENT_CAST, LEARN, BREW
                int delta0 = in.nextInt(); // tier-0 ingredient change
                int delta1 = in.nextInt(); // tier-1 ingredient change
                int delta2 = in.nextInt(); // tier-2 ingredient change
                int delta3 = in.nextInt(); // tier-3 ingredient change
                int price = in.nextInt(); // the price in rupees if this is a potion
                int tomeIndex = in.nextInt(); // in the first two leagues: always 0; later: the index in the tome if this is a tome spell, equal to the read-ahead tax; For brews, this is the value of the current urgency bonus
                int taxCount = in.nextInt(); // in the first two leagues: always 0; later: the amount of taxed tier-0 ingredients you gain from learning this spell; For brews, this is how many times you can still gain an urgency bonus
                boolean castable = in.nextInt() != 0; // in the first league: always 0; later: 1 if this is a castable player spell
                boolean repeatable = in.nextInt() != 0; // for the first two leagues: always 0; later: 1 if this is a repeatable player spell

                int[] ingredients = {delta0, delta1, delta2, delta3};
                
                if(actionType.equals("BREW")){
                    orders.add(new Order(actionId, ingredients, price));
                }
                else if(actionType.equals("CAST")){
                    if(repeatable && (!haveBlueRep || !haveGreenRep || !haveOrangeRep || !haveYellowRep)){
                        if(ingredients[0] < 0) haveBlueRep = true;
                        if(ingredients[1] < 0) haveGreenRep = true;
                        if(ingredients[2] < 0) haveOrangeRep = true;
                        if(ingredients[3] < 0) haveYellowRep = true;
                    }
                    if(ingredients[3] < 0) reduceYellow = true;
                    mySpells.add(new Spell(actionId, ingredients, castable, repeatable));
                }
                else if(actionType.equals("OPPONENT_CAST")){
                    opSpells.add(new Spell(actionId, ingredients, castable, repeatable));
                }
                else if(actionType.equals("LEARN")){
                    spellsToLearn.add(new LearnSpell(actionId, ingredients, tomeIndex, taxCount, repeatable));
                }
            }

            State me = null, opponent = null;

            mySpellsSize = mySpells.size();
            opSpellsSize = opSpells.size();

            BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = new BitSet(mySpellsSize + ordersSize + spellsToLearnSize + spellsToLearnSize);

            for (int i = 0; i < mySpellsSize; i++) {
                Spell spell = mySpells.get(i);
                spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i, !spell.castable);
            }

            for (int i = 0; i < 2; i++) {
                int inv0 = in.nextInt(); // tier-0 ingredients in inventory
                int inv1 = in.nextInt();
                int inv2 = in.nextInt();
                int inv3 = in.nextInt();
                int[] ingredients = {inv0, inv1, inv2, inv3};
                int score = in.nextInt(); // amount of rupees
                if(i == 0){
                    me = new State(score, ingredients, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, "", 0);
                    if(score != prevMyScore){
                        prevMyScore = score;
                        ordersLeftToMe--;
                    }
                }
                else{
                    //opponent = new State(score, ingredients, new BitSet(opSpellsSize), new BitSet(spellsToLearnSize), new BitSet(spellsToLearnSize), new BitSet(5), "", 0);
                    if(score != prevOpponentScore){
                        prevOpponentScore = score;
                        ordersLeftToOpponent--;
                    }
                }
            }

            //System.err.println("me: ");
            //me.show();

            //System.err.println("opponent: ");
            //opponent.show();

            if(learn > 0){
                if(!reduceYellow){
                    for(LearnSpell spell : spellsToLearn){
                        if(spell.tomeIndex > me.ingredients[0] || spell.tomeIndex > 2) continue;
                        if(spell.ingredients[3] < 0){
                            System.out.println("LEARN " + spell.id + " Hmm...");
                            reduceYellow = true;
                            learn--;
                            break;
                        }
                    }

                    if(reduceYellow) continue;
                }
                int ID = WhatLearn(me.ingredients[0]);
                if(ID != -1){
                    System.out.println("LEARN " + ID + " Hmm...");
                    learn--;
                    continue;
                }
            }

            startOrdersIndex = mySpellsSize;
            startSpellsLearndIndex = startOrdersIndex + ordersSize;
            startSpellsLearndUsedIndex = startSpellsLearndIndex + spellsToLearnSize;

            states = new ArrayList<State>();
            //mone = 0;
            String output = Sim(me);

            if(output.contains("gg")){
                System.out.println(output);
                continue;
            }

            boolean hasLearn = false;

            for (Integer index : spellsToLearnASAP) {
                if(spellsToLearn.get(index).tomeIndex <= me.ingredients[0]){
                    hasLearn = true;
                    System.out.println(spellsToLearn.get(index).output());
                    break;
                }
            }

            if(hasLearn) continue;
            

            // Write an action using System.out.println()
            // To debug: System.err.println("Debug messages...");

            //System.out.println(output);
            // later: BREW <id> | CAST <id> [<times>] | LEARN <id> | REST | WAIT
            System.out.println(output);
        }
    }

    public static int WhatLearn(int numberOfBlues){

        int CanDoAChainReaction = 0;
        int BestId = -1;

        boolean HelpMeToHaveRepFromAllKinds = false;

        for(int i = 0; i < 6; i++){
            LearnSpell learnableSpell = spellsToLearn.get(i);
            if(learnableSpell.tomeIndex > numberOfBlues) continue;

            int[] inventoryGain = {0,0,0,0};
            int[] inventoryCost = {0,0,0,0};
            int sumCost = 0;

            for(int j = 0; j < 4; j++){
                if(learnableSpell.ingredients[j] > 0){
                    inventoryGain[j] = learnableSpell.ingredients[j];
                }
                else{
                    inventoryCost[j] = learnableSpell.ingredients[j];
                    sumCost += inventoryCost[j] * -1;
                }
            }

            //if(sumCost > 3) continue;

            for(int j = 0; j < mySpells.size(); j++){
                Spell mySpell = mySpells.get(j);
                if(mySpell.repeatable == false) continue;

                int[] SumInven1 = addIngredients(mySpell.ingredients, inventoryGain);
                for(int k = 0; k < 4; k++){
                    inventoryGain[k] *= 2;
                }
                int[] SumInven2 = addIngredients(mySpell.ingredients, inventoryGain);

                if(SumInven1 != null){
                    int[] sumInven = addIngredients(inventoryCost, SumInven1);
                    if(sumInven != null){

                        int s = 0;
                        for(int k = 0; k < 4; k++){
                            s += sumInven[k] * values[k];
                        }

                        //If it help me and better than prev if the prev also help me
                        //if it help me and prev is not so change it
                        if(((!haveBlueRep && inventoryCost[0] < 0) ||
                        (!haveGreenRep && inventoryCost[1] < 0) || 
                        (!haveOrangeRep && inventoryCost[2] < 0) || 
                        (!haveYellowRep && inventoryCost[3] < 0)) && (!HelpMeToHaveRepFromAllKinds || s > CanDoAChainReaction)){
                            s = CanDoAChainReaction;
                            BestId = learnableSpell.id;
                            HelpMeToHaveRepFromAllKinds = true;
                        }
                        else if(!HelpMeToHaveRepFromAllKinds && s > CanDoAChainReaction){
                            s = CanDoAChainReaction;
                            BestId = learnableSpell.id;
                        }
                        //if it doesn't help me but I didn't found something that help me
                        //and this is better than prev than change it
                    }
                }
                else if(SumInven2 != null){
                    int[] sumInven = addIngredients(inventoryCost, SumInven2);
                    if(sumInven != null){

                        int s = 0;
                        for(int k = 0; k < 4; k++){
                            s += sumInven[k] * values[k];
                        }

                        //If it help me and better than prev if the prev also help me
                        //if it help me and prev is not so change it
                        if(((!haveBlueRep && inventoryCost[0] < 0) ||
                        (!haveGreenRep && inventoryCost[1] < 0) || 
                        (!haveOrangeRep && inventoryCost[2] < 0) || 
                        (!haveYellowRep && inventoryCost[3] < 0)) && (!HelpMeToHaveRepFromAllKinds || s > CanDoAChainReaction)){
                            s = CanDoAChainReaction;
                            BestId = learnableSpell.id;
                            HelpMeToHaveRepFromAllKinds = true;
                        }
                        else if(!HelpMeToHaveRepFromAllKinds && s > CanDoAChainReaction){
                            s = CanDoAChainReaction;
                            BestId = learnableSpell.id;
                        }
                        //if it doesn't help me but I didn't found something that help me
                        //and this is better than prev than change it
                    }
                }
            }
        }

        if(BestId != -1){
            System.err.println("WhatLearn");
            return BestId;
        }

        return getIdLearn(numberOfBlues);
    }

    public static int getIdLearn(int numberOfBlues){

        int Max = -100;
        int BestId = -1;

        for(int i = 0; i < 6; i++){
            LearnSpell learnableSpell = spellsToLearn.get(i);

            if(learnableSpell.tomeIndex > numberOfBlues) continue;

            int gain = 0;
            int cost = 0;
            int sumCost = 0;

            for(int j = 0; j < 4; j++){
                if(learnableSpell.ingredients[j] < 0){
                    cost += learnableSpell.ingredients[j] * -1 * values[j];
                    sumCost += learnableSpell.ingredients[j] * -1;
                }
                else{
                    gain += learnableSpell.ingredients[j] * values[j];
                }
            }

            //if(sumCost > 4) continue;

            int diff = gain - cost;

            if(diff > Max){
                Max = diff;
                BestId = learnableSpell.id;
            }
        }

        return BestId;
    }

    public static String Sim(State state){

        Queue<State> que = new ArrayDeque<State>();
        states.add(state);
        
        double bestPrice = 0;
        State bestState = null;

        int moneStates = 1;
        int moneDepth = 0;

        List<State> nextLevel = new ArrayList<State>();

        for (int i = 0; i < 5; i++) {
            Order order = orders.get(i);
            int[] newIngr = addIngredients(state.ingredients, order.ingredients);
            if(newIngr != null){
                String command = order.output();

                BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = (BitSet) state.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clone();
                spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i + startOrdersIndex);

                State newState = new State(state.score + order.price, newIngr, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, 
                command, state.depth + 1);

                boolean isAdded = addToStates(newState);
                if(isAdded){
                    if(ordersLeftToMe == 1){
                        if(newState.score > prevOpponentScore){
                            bestPrice = 100000;
                            bestState = newState;
                            System.err.println();
                            System.err.println("moneStates: " + moneStates);
                            System.err.println("moneDepth: " + moneDepth);
                            System.err.println("bestPrice: " + bestPrice);
                            System.err.println();
                            return bestState.command + " gg";
                        }
                        else if(newState.score < prevOpponentScore)
                            return "REST";
                    }
                    nextLevel.add(newState);
                }
            }
        }

        //CAST
        for (int i = 0; i < mySpellsSize; i++) {
            Spell spell = mySpells.get(i);
            if(state.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(i)){
                String command = "REST";
                int[] newIngr = addIngredients(state.ingredients, spell.ingredients);
                while(newIngr != null){
                    BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = (BitSet) state.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clone();
                    spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clear(0, mySpellsSize);
                    spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clear(startSpellsLearndUsedIndex, startSpellsLearndUsedIndex + spellsToLearnSize);
                    spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i);
                    

                    State newState = new State(state.score, newIngr, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, 
                    command, state.depth + 2);

                    boolean isAdded = addToStates(newState);
                    if(isAdded){
                        nextLevel.add(newState);
                    }

                    if(!spell.repeatable) break;

                    newIngr = addIngredients(newIngr, spell.ingredients);
                }
            }
            else{
                int times = 1;
                int[] newIngr = addIngredients(state.ingredients, spell.ingredients);
                while(newIngr != null){
                    String command = spell.output(times);
                    BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = (BitSet) state.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clone();
                    spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i);

                    State newState = new State(state.score, newIngr, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, 
                    command, state.depth + 1);
                    
                    boolean isAdded = addToStates(newState);
                    if(isAdded){
                        nextLevel.add(newState);
                    }
                    
                    times++;
                    
                    if(!spell.repeatable) break;
                    
                    newIngr = addIngredients(newIngr, spell.ingredients);
                }
            }
        }

        //LEARN
        for (int i = 0; i < spellsToLearnSize; i++) {
            LearnSpell spell = spellsToLearn.get(i);
            //Try to learn this spell
            if(spell.tomeIndex > state.ingredients[0]){
                //I don't have enough blues to pay for it
                continue;
            }
                
            int[] newIngr = Arrays.copyOf(state.ingredients, 4);
            newIngr[0] -= spell.tomeIndex;
            newIngr[0] += spell.taxCount;
            if(isValid(newIngr)){
                String command = spell.output();
                    
                newIngr = addIngredients(state.ingredients, spell.ingredients);
                while(newIngr != null){
                    BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = (BitSet) state.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clone();
                    spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i + startSpellsLearndIndex);
                    spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i + startSpellsLearndUsedIndex);

                    State newState = new State(state.score, newIngr, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, 
                    command, state.depth + 2);
                    boolean isAdded = addToStates(newState);
                    if(isAdded){
                        nextLevel.add(newState);
                    }

                    if(!spell.repeatable) break;

                    newIngr = addIngredients(newIngr, spell.ingredients);
                }
            }
        }
        
        Collections.sort(nextLevel, new Sortbyroll());
            
        int size = nextLevel.size();//(int) Math.round(nextLevel.size() * 0.7);
        int len = Math.min(N, size);
            
        for(int i = 0; i < len; i++){
            State stateNextLevel = nextLevel.get(i);
            que.add(stateNextLevel);
        }
            
        nextLevel = new ArrayList<State>();
        moneDepth++;


        while(!que.isEmpty()){
            State currState = que.remove();
            moneStates++;
            

            if(System.currentTimeMillis() - startTime >= timeToEnd) break;

            //System.err.println("currState: ");
            //currState.show();

            //System.err.println("passed...");

            for (int i = 0; i < 5; i++) {
                Order order = orders.get(i);
                int[] newIngr = addIngredients(currState.ingredients, order.ingredients);
                if(newIngr != null){
                    String command = currState.command;

                    BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = (BitSet) currState.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clone();
                    spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i + startOrdersIndex);

                    State newState = new State(currState.score + order.price, newIngr, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, 
                    command, currState.depth + 1);

                    boolean isAdded = addToStates(newState);

                    if(isAdded){
                        nextLevel.add(newState);
                    }
                }
            }

            double resEval = currState.evaluate();

            if(resEval > bestPrice){
                bestPrice = resEval;
                bestState = currState;
            }

            String command = currState.command;

            //CAST
            for (int i = 0; i < mySpellsSize; i++) {
                Spell spell = mySpells.get(i);
                if(currState.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(i)){
                    int[] newIngr = addIngredients(currState.ingredients, spell.ingredients);
                    while(newIngr != null){
                        BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = (BitSet) currState.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clone();
                        spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clear(0, mySpellsSize);
                        spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clear(startSpellsLearndUsedIndex, startSpellsLearndUsedIndex + spellsToLearnSize);
                        spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i);

                        State newState = new State(currState.score, newIngr, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, 
                        command, currState.depth + 2);
                        boolean isAdded = addToStates(newState);
                        if(isAdded){
                            nextLevel.add(newState);
                        }

                        if(!spell.repeatable) break;

                        newIngr = addIngredients(newIngr, spell.ingredients);
                    }
                }
                else{
                    int[] newIngr = addIngredients(currState.ingredients, spell.ingredients);
                    while(newIngr != null){
                        BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = (BitSet) currState.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clone();
                        spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i);

                        State newState = new State(currState.score, newIngr, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, 
                        command, currState.depth + 1);

                        boolean isAdded = addToStates(newState);
                        if(isAdded){
                            nextLevel.add(newState);
                        }

                        if(!spell.repeatable) break;

                        newIngr = addIngredients(newIngr, spell.ingredients);
                    }
                }
            }


            //LEARN
            for (int i = 0; i < spellsToLearnSize; i++) {
                LearnSpell spell = spellsToLearn.get(i);
                //i have LEARND this spell so I can CAST it now
                if(currState.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(i + startSpellsLearndIndex)){
                    //I CASTED the spell already
                    if(currState.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(i + startSpellsLearndUsedIndex)){
                        int[] newIngr = addIngredients(currState.ingredients, spell.ingredients);
                        while(newIngr != null){

                            BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = (BitSet) currState.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clone();
                            spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clear(0, mySpellsSize);
                            spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clear(startSpellsLearndUsedIndex, startSpellsLearndUsedIndex + spellsToLearnSize);
                            spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i + startSpellsLearndUsedIndex);

                            State newState = new State(currState.score, newIngr, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, 
                            command, currState.depth + 2);

                            boolean isAdded = addToStates(newState);
                            if(isAdded){
                                nextLevel.add(newState);
                            }

                            if(!spell.repeatable) break;

                            newIngr = addIngredients(newIngr, spell.ingredients);
                        }
                    }
                    else{
                        int[] newIngr = addIngredients(currState.ingredients, spell.ingredients);
                        while(newIngr != null){
                            BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = (BitSet) currState.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clone();
                            spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i + startSpellsLearndUsedIndex);

                            State newState = new State(currState.score, newIngr, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, 
                            command, currState.depth + 1);
                            boolean isAdded = addToStates(newState);
                            if(isAdded){
                                nextLevel.add(newState);
                            }

                            if(!spell.repeatable) break;

                            newIngr = addIngredients(newIngr, spell.ingredients);
                        }
                    }
                }
                else{
                    //Try to learn this spell
                    if(spell.tomeIndex > currState.ingredients[0]){
                        //I don't have enough blues to pay for it
                        continue;
                    }
                    int[] newIngr = Arrays.copyOf(currState.ingredients, 4);
                    newIngr[0] -= spell.tomeIndex;
                    newIngr[0] += spell.taxCount;
                    if(isValid(newIngr)){
                        newIngr = addIngredients(state.ingredients, spell.ingredients);
                        while(newIngr != null){
                            BitSet spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed = (BitSet) state.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.clone();
                            spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i + startSpellsLearndIndex);
                            spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.set(i + startSpellsLearndUsedIndex);

                            State newState = new State(state.score, newIngr, spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed, 
                            command, state.depth + 2);
                            boolean isAdded = addToStates(newState);
                            if(isAdded){
                                nextLevel.add(newState);
                            }

                            if(!spell.repeatable) break;

                            newIngr = addIngredients(newIngr, spell.ingredients);
                        }
                    }
                }
            }
            


            if(que.isEmpty()){
                Collections.sort(nextLevel, new Sortbyroll());

                size = nextLevel.size();//(int) Math.round(nextLevel.size() * 0.7);
                len = Math.min(N, size);

                for(int i = 0; i < len; i++){
                    State stateNextLevel = nextLevel.get(i);
                    que.add(stateNextLevel);
                }

                nextLevel = new ArrayList<State>();
                moneDepth++;
            }
        }

        System.err.println();
        System.err.println("moneStates: " + moneStates);
        System.err.println("moneDepth: " + moneDepth);
        System.err.println("bestPrice: " + bestPrice);
        System.err.println();

        if(bestState == null) return randomAction(state);

        /*spellsToLearnASAP = new ArrayList<Integer>();
        for(int i = startSpellsLearndIndex; i < startSpellsLearndIndex + spellsToLearnSize; i++){
            if(bestState.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(i)){
                spellsToLearnASAP.add(i - startSpellsLearndIndex);
            }
        }*/

        return bestState.command;
    }



    public static int[] addIngredients(int[] ingredients1, int[] ingredients2){
        int[] resIngr = new int[4];
        int mone = 0;

        for (int i = 0; i < 4; i++) {
            resIngr[i] = ingredients1[i] + ingredients2[i];
            if(resIngr[i] < 0) return null;
            mone += resIngr[i];
        }

        if(mone > 10) return null;
        return resIngr;
    }

    public static boolean isValid(int[] ingredients){
        int mone = 0;

        for (int i = 0; i < 4; i++) {
            if(ingredients[i] < 0) return false;
            mone += ingredients[i];
        }

        return mone <= 10;
    }

    public static boolean addToStates(State state){

        //mone++;

        boolean pass = false;

        for (int i = states.size() - 1; i > -1; i--) {
            State st = states.get(i);

            boolean worseIngredients = true, sameIngredients = true, betterIngredients = true;
            boolean worseSpellsUsed = true, sameSpellsUsed = true, betterSpellsUsed = true;
            boolean worseSpellsLearndUsed = true, sameSpellsLearndUsed = true, betterSpellsLearndUsed = true;

            //check ingredients
            for(int j = 0; j < 4; j++){
                if(st.ingredients[j] > state.ingredients[j]){
                    betterIngredients = false;
                    sameIngredients = false;
                }
                else if(st.ingredients[j] < state.ingredients[j]){
                    worseIngredients = false;
                    sameIngredients = false;
                }
            }

            if(sameIngredients){
                betterIngredients = false;
                worseIngredients = false;
            }

            //check spellsUsed
            for(int j = 0; j < mySpellsSize; j++){
                if(st.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(j) && state.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(j) == false){
                    sameSpellsUsed = false;
                    worseSpellsUsed = false;
                }
                else if(st.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(j) == false && state.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(j)){
                    betterSpellsUsed = false;
                    sameSpellsUsed = false;
                }
            }

            if(sameSpellsUsed){
                betterSpellsUsed = false;
                worseSpellsUsed = false;
            }

            //check spellLearndUsed
            for(int j = startSpellsLearndUsedIndex; j < spellsToLearnSize + startSpellsLearndUsedIndex; j++){
                if(st.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(j) && state.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(j) == false){
                    sameSpellsLearndUsed = false;
                    worseSpellsLearndUsed = false;
                }
                else if(st.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(j) == false && state.spellsUsedAndOrdersDeliverdAndSpellsLearndAndSpellsLearndUsed.get(j)){
                    betterSpellsLearndUsed = false;
                    sameSpellsLearndUsed = false;
                }
            }

            if(sameSpellsLearndUsed){
                betterSpellsLearndUsed = false;
                worseSpellsLearndUsed = false;
            }

            if(state.score <= st.score && state.depth >= st.depth &&
            ((sameIngredients && sameSpellsUsed && sameSpellsLearndUsed)  || 
            (sameIngredients && sameSpellsUsed && worseSpellsLearndUsed)  || 
            (sameIngredients && worseSpellsUsed && sameSpellsLearndUsed) || 
            (sameIngredients && worseSpellsUsed && worseSpellsLearndUsed) ||
            (worseIngredients && sameSpellsUsed && sameSpellsLearndUsed) ||
            (worseIngredients && sameSpellsUsed && worseSpellsLearndUsed) ||
            (worseIngredients && worseSpellsUsed && sameSpellsLearndUsed) ||
            (worseIngredients && worseSpellsUsed && worseSpellsLearndUsed))) {
                return false;
            }

            if(betterIngredients || betterSpellsUsed || betterSpellsLearndUsed || 
            (!worseSpellsLearndUsed && !sameSpellsLearndUsed && !betterSpellsLearndUsed) ||
            (!worseSpellsUsed && !sameSpellsUsed && !betterSpellsUsed) || 
            (!worseIngredients && !sameIngredients && !betterIngredients)){
                pass = true;
            }
            else if(((sameIngredients && sameSpellsUsed && sameSpellsLearndUsed)  || 
                    (sameIngredients && sameSpellsUsed && worseSpellsLearndUsed)  || 
                    (sameIngredients && worseSpellsUsed && sameSpellsLearndUsed) || 
                    (sameIngredients && worseSpellsUsed && worseSpellsLearndUsed) ||
                    (worseIngredients && sameSpellsUsed && sameSpellsLearndUsed) ||
                    (worseIngredients && sameSpellsUsed && worseSpellsLearndUsed) ||
                    (worseIngredients && worseSpellsUsed && sameSpellsLearndUsed) ||
                    (worseIngredients && worseSpellsUsed && worseSpellsLearndUsed)) && (state.score > st.score || state.depth < st.depth)) {
                pass = true;
            }
                //0 0 1
            if(((sameIngredients && sameSpellsUsed && betterSpellsLearndUsed) ||
                //0 1 0
                (sameIngredients && betterSpellsUsed && sameSpellsLearndUsed) ||
                //0 1 1
                (sameIngredients && betterSpellsUsed && betterSpellsLearndUsed) ||
                //1 0 0
                (betterIngredients && sameSpellsUsed && sameSpellsLearndUsed) ||
                //1 0 1
                (betterIngredients && sameSpellsUsed && betterSpellsLearndUsed) ||
                //1 1 0
                (betterIngredients && betterSpellsUsed && sameSpellsLearndUsed) ||
                //1 1 1
                (betterIngredients && betterSpellsUsed && betterSpellsUsed))
                && state.score >= st.score && state.depth <= st.depth){
                states.set(i, state);
                return true;
            }
        }

        if(pass){
            states.add(state);
        }

        return pass;
    }

    public static String randomAction(State state){
        List<String> commands = new ArrayList<String>();

        boolean rest = false;

        for(Spell spell : mySpells){
            if(!spell.castable){
                rest = true;
                continue;
            }
            int[] newIngr = addIngredients(state.ingredients, spell.ingredients);
            int times = 1;
            while(newIngr != null){
                String command = spell.output(times);
                commands.add(command);

                if(!spell.repeatable) break;

                times++;

                newIngr = addIngredients(newIngr, spell.ingredients);
            }
        }

        if(rest) commands.add("REST");

        int index = (int) Math.floor(Math.random() * commands.size());

        System.err.println("index: " + index);

        String com = commands.get(index);

        System.err.println("com: " + com);

        return com;
    }
}
